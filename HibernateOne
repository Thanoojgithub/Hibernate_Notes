1.  org.hibernate.Transaction.commit() and org.hibernate.Session.flush()

https://docs.jboss.org/hibernate/orm/3.5/reference/en/html/batch.html

In the Hibernate Manual you can see this example

      Session session = sessionFactory.openSession();
      Transaction tx = session.beginTransaction();
      
      
      for ( int i=0; i<100000; i++ ) {
          Customer customer = new Customer(.....);
          session.save(customer);
          if ( i % 20 == 0 ) { //20, same as the JDBC batch size
              //flush a batch of inserts and release memory:
              session.flush();
              session.clear();
          }
      }
      
      tx.commit();
      session.close();
------------------------------------------------------------

Without the call to the flush method, your first-level cache would throw an OutOfMemoryException
Also you can look at this post about flushing (http://docs.jboss.org/hibernate/core/3.3/reference/en/html/objectstate.html#objectstate-flushing)

flush(); 
Flushing is the process of synchronizing the underlying persistent store with persistable state held in memory.it will update or insert into your tables in the running transaction, but it may not commit those changes.

You need to flush in batch processing otherwise it may give OutOfMemoryException.

Commit(); 
Commit will make the database commit.When you have a persisted object and you change a value on it, it becomes dirty and hibernate needs to flush these changes to your persistence layer.So You should commit but it also ends the unit of work.transaction.commit()
--------------------------------------------------------------

2. session.get() vs session.load()

a. public Object get(Class clazz, Serializable id) : 			

1. hit the DB at the time of method call.
2. if it is valid object,it will return the object and it will store in the cache.
3. get() returns NULL, when we call get() with non-existing ID
4. for second time when we call get() with same id, it will check the cache and return the object from cache if it is available otherwise it will hit the DB again.
5. when we try to access same object even after closing session, we will get the valid and same object (as object already asigned at the line of get() method call itself)
6. Return the persistent instance of the given entity class with the given identifier, or null if there is no such persistent instance. (If the instance is already associated with the session, return that instance. This method never returns an uninitialized instance.)

b. public Object load(Class theClass, Serializable id) : 

1. on method load() call,it creates the proxy object and return it.
2. when we try to do any operation for that object, first it will hit DB, get the real instance and then it will do the  respective operation (setter/getter).
3. load() throws ObjectNotFoundException, when we access object, if we try to call load() with non-existing ID
4. for second time when we call load() with same id, it will check the cache and return the object from cache if it is available otherwise it will hit the DB again.
5. it throws 'org.hibernate.LazyInitializationException: could not initialize proxy - no Session', when we try to access object after closing session.
6. You should not use this method to determine if an instance exists (use get() instead). Use this only to retrieve an instance that you assume exists, where non-existence would be an actual error.

Case1 : 
Session session = HibernateUtil.getSessionFactory().openSession();
RegOffice regOfficeInc = (RegOffice)session.get(RegOffice.class, 30);
regOfficeInc = null;
regOfficeInc = (RegOffice)session.load(RegOffice.class, 30);// it will load from cache, even though ref is NULL.
session.close();
System.out.println(regOfficeInc);

---------------------------------------

3. session.evict(obj) vs session.clear() vs session.flush() 
		
a. void session.evict (obj):
	Remove this(obj) instance from the session cache
		or
	will clear the buffer with specified object. 
		or
	evicts a single/specified object from the session. 

b. void session.clear ():
	Completely clear the session
		or
	Clear all objects within the buffer, but does not include the operation object.
          
c. void flush() throws HibernateException :
	Force this session to flush. Must be called at the end of a unit of work, before committing the transaction and closing the session (depending on flush-mode, Transaction.commit() calls this method).
	Flushing is the process of synchronizing/persistenting the data with cache.

d. void setFlushMode(FlushMode flushMode)
	The flush mode determines the points at which the session is flushed.
	For a logically "read only" session, it is reasonable to set the session's flush mode to FlushMode.MANUAL at the start of the session (in order to achieve some extra performance).
	
--------------------------------------------------------------------------
@Fetch(FetchMode.SUBSELECT) ::
select this_.OID as OID1_0_0_, this_.LOCATION as LOCATION2_0_0_, this_.REG_O_ID as REG_O_ID3_0_0_ from MYDB.REG_OFFICE this_
select vehicles0_.REG_OID as REG_OID3_0_1_, vehicles0_.VID as VID1_1_1_, vehicles0_.VID as VID1_1_0_, vehicles0_.REG_OID as REG_OID3_1_0_, vehicles0_.V_REGNO as V_REGNO2_1_0_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID in (select this_.OID from MYDB.REG_OFFICE this_)

@Fetch(FetchMode.SELECT) ::
select regoffice0_.OID as OID1_0_0_, regoffice0_.LOCATION as LOCATION2_0_0_, regoffice0_.REG_O_ID as REG_O_ID3_0_0_ from MYDB.REG_OFFICE regoffice0_ where regoffice0_.OID=?
select vehicles0_.REG_OID as REG_OID3_0_0_, vehicles0_.VID as VID1_1_0_, vehicles0_.VID as VID1_1_1_, vehicles0_.REG_OID as REG_OID3_1_1_, vehicles0_.V_REGNO as V_REGNO2_1_1_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID=?
[Vehicle [vId=101, vRegNo=1971716953, regOffice=RegOffice [oId=30, regOId=1587824884, location=TPT]], Vehicle [vId=100, vRegNo=1996367776, regOffice=RegOffice [oId=30, regOId=1587824884, location=TPT]]]
Hibernate: /* criteria query */ select this_.OID as OID1_0_0_, this_.LOCATION as LOCATION2_0_0_, this_.REG_O_ID as REG_O_ID3_0_0_ from MYDB.REG_OFFICE this_
Hibernate: select vehicles0_.REG_OID as REG_OID3_0_0_, vehicles0_.VID as VID1_1_0_, vehicles0_.VID as VID1_1_1_, vehicles0_.REG_OID as REG_OID3_1_1_, vehicles0_.V_REGNO as V_REGNO2_1_1_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID=?
Hibernate: select vehicles0_.REG_OID as REG_OID3_0_0_, vehicles0_.VID as VID1_1_0_, vehicles0_.VID as VID1_1_1_, vehicles0_.REG_OID as REG_OID3_1_1_, vehicles0_.V_REGNO as V_REGNO2_1_1_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID=?
Hibernate: select vehicles0_.REG_OID as REG_OID3_0_0_, vehicles0_.VID as VID1_1_0_, vehicles0_.VID as VID1_1_1_, vehicles0_.REG_OID as REG_OID3_1_1_, vehicles0_.V_REGNO as V_REGNO2_1_1_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID=?
Hibernate: select vehicles0_.REG_OID as REG_OID3_0_0_, vehicles0_.VID as VID1_1_0_, vehicles0_.VID as VID1_1_1_, vehicles0_.REG_OID as REG_OID3_1_1_, vehicles0_.V_REGNO as V_REGNO2_1_1_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID=?
Hibernate: select vehicles0_.REG_OID as REG_OID3_0_0_, vehicles0_.VID as VID1_1_0_, vehicles0_.VID as VID1_1_1_, vehicles0_.REG_OID as REG_OID3_1_1_, vehicles0_.V_REGNO as V_REGNO2_1_1_ from MYDB.VEHICLE vehicles0_ where vehicles0_.REG_OID=?

@Fetch(FetchMode.JOIN) ::
select regoffice0_.OID as OID1_0_0_, regoffice0_.LOCATION as LOCATION2_0_0_, regoffice0_.REG_O_ID as REG_O_ID3_0_0_, vehicles1_.REG_OID as REG_OID3_0_1_, vehicles1_.VID as VID1_1_1_, vehicles1_.VID as VID1_1_2_, vehicles1_.REG_OID as REG_OID3_1_2_, vehicles1_.V_REGNO as V_REGNO2_1_2_ from MYDB.REG_OFFICE regoffice0_ left outer join MYDB.VEHICLE vehicles1_ on regoffice0_.OID=vehicles1_.REG_OID where regoffice0_.OID=?
[Vehicle [vId=101, vRegNo=1971716953, regOffice=RegOffice [oId=30, regOId=1587824884, location=TPT]], Vehicle [vId=100, vRegNo=1996367776, regOffice=RegOffice [oId=30, regOId=1587824884, location=TPT]]]
select this_.OID as OID1_0_1_, this_.LOCATION as LOCATION2_0_1_, this_.REG_O_ID as REG_O_ID3_0_1_, vehicles2_.REG_OID as REG_OID3_0_3_, vehicles2_.VID as VID1_1_3_, vehicles2_.VID as VID1_1_0_, vehicles2_.REG_OID as REG_OID3_1_0_, vehicles2_.V_REGNO as V_REGNO2_1_0_ from MYDB.REG_OFFICE this_ left outer join MYDB.VEHICLE vehicles2_ on this_.OID=vehicles2_.REG_OID
