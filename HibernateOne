1.  org.hibernate.Transaction.commit() and org.hibernate.Session.flush()

In the Hibernate Manual you can see this example

      Session session = sessionFactory.openSession();
      Transaction tx = session.beginTransaction();
      
      
      for ( int i=0; i<100000; i++ ) {
          Customer customer = new Customer(.....);
          session.save(customer);
          if ( i % 20 == 0 ) { //20, same as the JDBC batch size
              //flush a batch of inserts and release memory:
              session.flush();
              session.clear();
          }
      }
      
      tx.commit();
      session.close();
------------------------------------------------------------

Without the call to the flush method, your first-level cache would throw an OutOfMemoryException
Also you can look at this post about flushing (http://docs.jboss.org/hibernate/core/3.3/reference/en/html/objectstate.html#objectstate-flushing)

flush(); 
Flushing is the process of synchronizing the underlying persistent store with persistable state held in memory.it will update or insert into your tables in the running transaction, but it may not commit those changes.

You need to flush in batch processing otherwise it may give OutOfMemoryException.

Commit(); 
Commit will make the database commit.When you have a persisted object and you change a value on it, it becomes dirty and hibernate needs to flush these changes to your persistence layer.So You should commit but it also ends the unit of work.transaction.commit()
--------------------------------------------------------------

2. session.get() vs session.load()

a. public Object get(Class clazz, Serializable id) : 

1.hit the DB at the time of method call.
2.if it is valid object,it will return the object and it will store in the cache.
3. get() returns NULL, when we call get() with non-existing ID
4.for second time when we call get() with same id, it will check the cache and return the object from cache if it is 
5. when we try to access same object even after closing session, we will get the valid and same object (as object already 

b. public Object load(Class theClass, Serializable id) : 

1.on method load() call,it creates the proxy object and return it.
2.when we try to do any operation for that object, first it will hit DB, get the real instance and then it will do the  
3. load() throws ObjectNotFoundException, when we access object, if we try to call load() with non-existing ID
4. for second time when we call load() with same id, it will check the cache and return the object from cache if it is 
5. it throws 'org.hibernate.LazyInitializationException: could not initialize proxy - no Session', when we try to access 

Case1 : 
Session session = HibernateUtil.getSessionFactory().openSession();
RegOffice regOfficeInc = (RegOffice)session.get(RegOffice.class, 30);
regOfficeInc = null;
regOfficeInc = (RegOffice)session.load(RegOffice.class, 30);// it will load from cache, even though ref is NULL.
session.close();
System.out.println(regOfficeInc);
